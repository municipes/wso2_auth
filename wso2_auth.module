<?php

/**
 * @file
 * WSO2 Authentication module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 *
 * This is a traditional hook implementation for backward compatibility.
 * In Drupal 11.1+, the attribute-based implementation in HookImplementation.php
 * will be used instead.
 */
function wso2_auth_help($route_name, RouteMatchInterface $route_match) {
  if (\Drupal::hasService('wso2_auth.hook_implementation')) {
    return \Drupal::service('wso2_auth.hook_implementation')->help($route_name, $route_match);
  }

  switch ($route_name) {
    case 'help.page.wso2_auth':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The WSO2 Authentication module provides integration with WSO2 Identity Server for user authentication.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 *
 * This is a traditional hook implementation for backward compatibility.
 * In Drupal 11.1+, the attribute-based implementation in HookImplementation.php
 * will be used instead.
 */
function wso2_auth_theme($existing, $type, $theme, $path) {
  if (\Drupal::hasService('wso2_auth.hook_implementation')) {
    return \Drupal::service('wso2_auth.hook_implementation')->theme($existing, $type, $theme, $path);
  }

  $module_handler = \Drupal::service('module_handler');
  $module_path = \Drupal::service('extension.list.module')->getPath('wso2_auth');
  return [
    'wso2_auth_block' => [
      'variables' => [
        'title' => NULL,
        'module_path' => $module_path,
        'profile' => NULL,
        'requestUri' => NULL,
      ],
      'template' => 'block--wso2-auth-login',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This is a traditional hook implementation for backward compatibility.
 * In Drupal 11.1+, the attribute-based implementation in HookImplementation.php
 * will be used instead.
 */
function wso2_auth_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::hasService('wso2_auth.hook_implementation')) {
    return \Drupal::service('wso2_auth.hook_implementation')->formAlter($form, $form_state, $form_id);
  }
}

/**
 * Implements hook_user_logout().
 *
 * This is a traditional hook implementation for backward compatibility.
 * In Drupal 11.1+, the attribute-based implementation in HookImplementation.php
 * will be used instead.
 */
function wso2_auth_user_logout($account) {
  if (\Drupal::hasService('wso2_auth.hook_implementation')) {
    return \Drupal::service('wso2_auth.hook_implementation')->userLogout($account);
  }
}

/**
 * Form submission handler for user_login_form.
 *
 * Assicura che la sessione sia correttamente salvata prima del redirect.
 */
function wso2_auth_user_login_form_submit($form, FormStateInterface $form_state) {
  if (\Drupal::hasService('wso2_auth.hook_implementation')) {
    return \Drupal::service('wso2_auth.hook_implementation')->userLoginFormSubmit($form, $form_state);
  }

  // Non facciamo nulla di particolare qui, ma siccome il form aggiunge
  // questo submit handler, dobbiamo definirlo
}

<?php

/**
 * @file
 * WSO2 Authentication module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function wso2_auth_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.wso2_auth':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The WSO2 Authentication module provides integration with WSO2 Identity Server for user authentication.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_page_attachments().
 */
function wso2_auth_page_attachments(array &$attachments) {
  $config = \Drupal::config('wso2_auth.settings');

  // Only proceed if auto-login is enabled
  if ($config->get('auto_login') && $config->get('enabled')) {
    // Don't check on auth-related paths to avoid loops
    $current_path = \Drupal::service('path.current')->getPath();
    if (strpos($current_path, '/wso2-auth/') === 0) {
      return;
    }
    if (strpos($current_path, '/wso2silfi/') === 0) {
      return;
    }

    // Add JavaScript for auto-login
    $attachments['#attached']['library'][] = 'wso2_auth/auto_login';

    // Add settings for JavaScript
    $attachments['#attached']['drupalSettings']['wso2_auth'] = [
      'checkSessionUrl' => Url::fromRoute('wso2_auth.check_session')->toString(),
      'loginUrl' => Url::fromRoute('wso2_auth.authorize')->toString(),
    ];
  }
}

/**
 * Implements hook_page_top().
 *
 * Check for auto-login on each page load if the user is not already logged in.
 */
function wso2_auth_page_top(array &$page_top) {
  // Get the configuration
  $config = \Drupal::config('wso2_auth.settings');

  // Only proceed if auto-login is enabled
  if (!$config->get('auto_login') || !$config->get('enabled')) {
    return;
  }

  // Skip for AJAX requests
  if (\Drupal::request()->isXmlHttpRequest()) {
    return;
  }

  // Skip for POST requests (form submissions)
  if (\Drupal::request()->isMethod('POST')) {
    return;
  }

  // Don't check on auth-related paths to avoid loops
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, '/wso2-auth/') === 0) {
    return;
  }
  if (strpos($current_path, '/wso2silfi/') === 0) {
    return;
  }

  // If user is already authenticated in Drupal, no need to check WSO2
  if (!\Drupal::currentUser()->isAnonymous()) {
    return;
  }

  // Check if we need to perform auto-login
  $session = \Drupal::request()->getSession();

  // Get the auto_login_checked value
  $auto_login_checked = $session->get('wso2_auth_auto_login_checked');

  // Get the timestamp of last check
  $last_check_time = $session->get('wso2_auth_last_check_time', 0);
  $current_time = time();

  // Check if we've already tried auto-login recently (within the last 5 minutes)
  if ($auto_login_checked && ($current_time - $last_check_time) < 300) {
    return;
  }

  // Mark that we've checked auto-login for this session and store the current time
  $session->set('wso2_auth_auto_login_checked', TRUE);
  $session->set('wso2_auth_last_check_time', $current_time);

  // Check if we have an active auto-login attempt in progress
  $auto_login_attempt = $session->get('wso2_auth_auto_login_attempt');
  if ($auto_login_attempt) {
    // If we've already tried to auto-login in this session, don't try again
    // This prevents redirect loops
    return;
  }

  // Get the WSO2 Auth service
  $service = \Drupal::service('wso2_auth.authentication');

  // IMPORTANTE: Prima di fare il redirect, verifichiamo se l'utente ha una sessione attiva in WSO2
  if (!$service->isUserAuthenticated()) {
    // L'utente non ha una sessione attiva con WSO2, quindi non facciamo il redirect
    if ($config->get('debug')) {
      \Drupal::logger('wso2_auth')->debug('No active WSO2 session detected, skipping auto-login.');
    }
    return;
  }

  // Mark that we're attempting an auto-login
  $session->set('wso2_auth_auto_login_attempt', TRUE);

  // Log for debugging
  if ($config->get('debug')) {
    \Drupal::logger('wso2_auth')->debug('Active WSO2 session detected. Initiating auto-login for current path: @path', [
      '@path' => $current_path,
    ]);
  }

  // Initiate the authorization flow, passing current path as destination
  $url = $service->getAuthorizationUrl($current_path);
  $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url);
  $response->send();
  exit;
}

/**
 * Implements hook_theme().
 */
function wso2_auth_theme() {
  return [
    'wso2_auth_login_button' => [
      'variables' => [
        'url' => NULL,
        'label' => t('Log in with WSO2'),
      ],
      'template' => 'wso2-auth-login-button',
    ],
    'wso2_auth_status_block' => [
      'variables' => [
        'environment' => 'production',
        'authenticated' => FALSE,
        'login_url' => NULL,
        'logout_url' => NULL,
        'is_admin' => FALSE,
      ],
      'template' => 'wso2-auth-status-block',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wso2_auth_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Get the WSO2 Auth service.
  $wso2_auth = \Drupal::service('wso2_auth.authentication');

  // Check if WSO2 authentication is configured and enabled.
  if (!$wso2_auth->isConfigured()) {
    return;
  }

  // Add a button/link to the form for WSO2 login.
  $form['wso2_auth_login'] = [
    '#theme' => 'wso2_auth_login_button',
    '#url' => Url::fromRoute('wso2_auth.authorize')->toString(),
    '#weight' => -100,
  ];

  // Add CSS.
  $form['#attached']['library'][] = 'wso2_auth/wso2_auth.login';

  // Add WSO2 login logo if enabled
  $config = \Drupal::config('wso2_auth.settings');
  if ($config->get('picture_enabled')) {
    $form['wso2_logo'] = [
      '#markup' => '<div class="wso2-auth-logo"><img src="/' . drupal_get_path('module', 'wso2_auth') . '/images/spid-logo.svg" alt="WSO2 Login" /></div>',
      '#weight' => -110,
    ];
  }
}

/**
 * Implements hook_user_logout().
 */
function wso2_auth_user_logout($account) {
  // Get the WSO2 Auth service.
  $wso2_auth = \Drupal::service('wso2_auth.authentication');

  // Get the session.
  $session = \Drupal::request()->getSession();

  // Check if the user has a WSO2 session.
  $wso2_session = $session->get('wso2_auth_session');
  if (!empty($wso2_session) && !empty($wso2_session['id_token'])) {
    // Store the id_token in the state service so it can be used after the user is logged out.
    \Drupal::state()->set('wso2_auth_logout_token_' . $account->id(), $wso2_session['id_token']);
  }

  // Clear the WSO2 session.
  $session->remove('wso2_auth_session');
}

/**
 * Implements hook_user_logout_redirect_alter().
 */
function wso2_auth_user_logout_redirect_alter(&$response) {
  // Get the current user before logout.
  $account = \Drupal::currentUser();
  $uid = $account->id();

  // Check if we have an id_token for this user.
  $id_token = \Drupal::state()->get('wso2_auth_logout_token_' . $uid);
  if (!empty($id_token)) {
    // Get the WSO2 Auth service.
    $wso2_auth = \Drupal::service('wso2_auth.authentication');

    // Generate the logout URL.
    $logout_url = $wso2_auth->getLogoutUrl($id_token, \Drupal\Core\Url::fromRoute('<front>')->setAbsolute()->toString());

    // Remove the stored token.
    \Drupal::state()->delete('wso2_auth_logout_token_' . $uid);

    // Set the response to redirect to the WSO2 logout URL.
    $response = new \Symfony\Component\HttpFoundation\RedirectResponse($logout_url);
  }
}

<?php

/**
 * @file
 * WSO2 Authentication module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function wso2_auth_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.wso2_auth':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The WSO2 Authentication module provides integration with WSO2 Identity Server for user authentication.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function wso2_auth_theme($existing, $type, $theme, $path) {
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('wso2_auth')->getPath();
  return [
   'wso_auth_block' => [
        'variables' => [
          'title' => NULL,
          'module_path' => $module_path,
          'profile' => NULL,
          'requestUri' => NULL,
        ],
        'template' => 'block--wso2-auth-login',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wso2_auth_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Get the WSO2 Auth service.
  $wso2_auth = \Drupal::service('wso2_auth.authentication');

  // Check if WSO2 authentication is configured and enabled.
  if (!$wso2_auth->isConfigured()) {
    return;
  }

  // Get configuration
  $config = \Drupal::config('wso2_auth.settings');

  // Add buttons for citizen and operator login
  if ($config->get('general.citizen_enabled')) {
    $form['wso2_auth_citizen'] = [
      '#type' => 'link',
      '#title' => t('Login con SPID/CIE (Cittadino)'),
      '#url' => \Drupal\Core\Url::fromRoute('wso2_auth.authorize', ['type' => 'citizen']),
      '#attributes' => [
        'class' => ['btn', 'btn-primary', 'me-5', 'mb-5', 'wso2-auth-button', 'citizen-login'],
      ],
      '#weight' => -100,
    ];
  }

  // Add operator button if operator auth is enabled
  if ($config->get('operator.enabled')) {
    $form['wso2_auth_operator'] = [
      '#type' => 'link',
      '#title' => t('Login come Operatore'),
      '#url' => \Drupal\Core\Url::fromRoute('wso2_auth.authorize', ['type' => 'operator']),
      '#attributes' => [
        'class' => ['btn', 'btn-danger', 'me-5', 'mb-5', 'wso2-auth-button', 'operator-login'],
      ],
      '#weight' => -99,
    ];
  }

  // Add SPID logo if enabled
  if ($config->get('picture_enabled')) {
    $form['wso2_logo'] = [
      '#markup' => '<div class="wso2-auth-logo m-2"><img src="/' . \Drupal::service('extension.list.module')->getPath('wso2_auth') . '/images/Sign-in-with-WSO2-lighter-small.png" alt="SPID Login" /></div>',
      '#weight' => -110,
    ];
  }
}

/**
 * Implements hook_user_logout().
 */
function wso2_auth_user_logout($account) {
  // Get the WSO2 Auth service.
  $wso2_auth = \Drupal::service('wso2_auth.authentication');

  // Get the session.
  $session = \Drupal::request()->getSession();

  // Check if the user has a WSO2 session.
  $wso2_session = $session->get('wso2_auth_session');
  if (!empty($wso2_session) && !empty($wso2_session['id_token'])) {
    // Store the id_token in the state service so it can be used after the user is logged out.
    \Drupal::state()->set('wso2_auth_logout_token_' . $account->id(), $wso2_session['id_token']);
  }

  // Clear the WSO2 session.
  $session->remove('wso2_auth_session');
}

/**
 * Implements hook_user_logout_redirect_alter().
 */
function wso2_auth_user_logout_redirect_alter(&$response) {
  // Get the current user before logout.
  $account = \Drupal::currentUser();
  $uid = $account->id();

  // Check if we have an id_token for this user.
  $id_token = \Drupal::state()->get('wso2_auth_logout_token_' . $uid);
  if (!empty($id_token)) {
    // Get the WSO2 Auth service.
    $wso2_auth = \Drupal::service('wso2_auth.authentication');

    // Generate the logout URL.
    $logout_url = $wso2_auth->getLogoutUrl($id_token, \Drupal\Core\Url::fromRoute('<front>')->setAbsolute()->toString());

    // Remove the stored token.
    \Drupal::state()->delete('wso2_auth_logout_token_' . $uid);

    // Set the response to redirect to the WSO2 logout URL.
    $response = new \Symfony\Component\HttpFoundation\RedirectResponse($logout_url);
  }
}
